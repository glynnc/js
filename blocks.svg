<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://web.resource.org/cc/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   viewBox="0 0 420 700"
   id="svg2"
   sodipodi:version="0.32"
   inkscape:version="0.45"
   version="1.0"
   sodipodi:docname="blocks.svg"
   inkscape:output_extension="org.inkscape.output.svg.inkscape"
   onload="startup(evt)"
   sodipodi:modified="true">
  <script>
    <![CDATA[
        var xmlns="http://www.w3.org/2000/svg"
        
        var SX = 100;
        var SY = 100;
        
        var blocks_init = {
            "large_0" : {"x": 1*SX, "y": 0*SY, "width": 2*SX, "height": 2*SY},
            "horz_0"  : {"x": 1*SX, "y": 2*SY, "width": 2*SX, "height": 1*SY},
            "vert_0"  : {"x": 0*SX, "y": 0*SY, "width": 1*SX, "height": 2*SY},
            "vert_1"  : {"x": 3*SX, "y": 0*SY, "width": 1*SX, "height": 2*SY},
            "vert_2"  : {"x": 0*SX, "y": 2*SY, "width": 1*SX, "height": 2*SY},
            "vert_3"  : {"x": 3*SX, "y": 2*SY, "width": 1*SX, "height": 2*SY},
            "small_0" : {"x": 1*SX, "y": 3*SY, "width": 1*SX, "height": 1*SY},
            "small_1" : {"x": 2*SX, "y": 3*SY, "width": 1*SX, "height": 1*SY},
            "small_2" : {"x": 0*SX, "y": 4*SY, "width": 1*SX, "height": 1*SY},
            "small_3" : {"x": 3*SX, "y": 4*SY, "width": 1*SX, "height": 1*SY}
        };
        
        var blocks;
        
        var bound_x = 4*SX;
        var bound_y = 5*SY;
        
        var status_t;
        
        var start_x, start_y;
        
        var solver = null;
        var solution_id = null;
        
        function set_status(msg)
        {
            var status = status_t;
            for (var i = 0; i < status.childNodes.length; i++)
        	status.removeChild(status.childNodes[i]);
            status.appendChild(document.createTextNode(msg));
            document.rootElement.forceRedraw();
        }
        
        function moveto(elem, x, y)
        {
            //elem.setAttribute("transform", "translate("+x+","+y+")");
            elem.setAttribute("x", x);
            elem.setAttribute("y", y);
        }
        
        function do_solution()
        {
            if (solver == null || solver.solution == null || solver.solution.length == 0) {
                window.clearInterval(solution_id);
        	solution_id = null;
        	set_status("Done");
                solver = null;
        	return;
            }
        
            var state = solver.solution.pop();
        
            var names = ["small","vert","horz","large"];
            for (var i = 0; i < names.length; i++) {
        	var base = names[i];
        	for (var j = 0; j < state[i].length; j++) {
        	    var id = base + "_" + j;
        	    var block = blocks[id];
        	    var elem = document.getElementById(id);
        	    var x = state[i][j][0];
        	    var y = state[i][j][1];
        	    elem.setAttribute('x', x*SX);
        	    elem.setAttribute('y', y*SY);
        	    block.x = SX * x;
        	    block.y = SY * y;
        	}
            }
        }
        
        function do_solve()
        {
            if (solver.solve()) {
                set_status("Solved");
                solution_id = window.setInterval(do_solution, 200);
            }
            else
                window.requestAnimationFrame(do_solve);
        }
        
        function solve(evt)
        {
            if (solver != null)
                return;
        
            set_status("Solving...");
        
            solver = new Solver();
            solver.begin();
            window.requestAnimationFrame(do_solve);
        }
        
        function collide_x(id, sx, sy, dx)
        {
            var block = blocks[id];
            var x = sx + dx;
            var y = sy;
            var w = block.width;
            var h = block.height;
        
            if (x + w > bound_x)
        	x = bound_x - w;
            if (x < 0)
        	x = 0;
        
            for (var id2 in blocks) {
        	if (id2 == id)
        	    continue;
        
        	var block2 = blocks[id2];
        	var x2 = block2.x;
        	var y2 = block2.y;
        	var w2 = block2.width;
        	var h2 = block2.height;
        
        	if (y + h <= y2 || y >= y2 + h2)
        	    continue;
        
        	if (dx > 0) {
        	    if (sx >= x2 + w2)
        		continue;
        	    if (x + w <= x2)
        		continue;
        	    x = x2 - w;
        	}
        	else {
        	    if (sx + w <= x2)
        		continue;
        	    if (x >= x2 + w2)
        		continue;
        	    x = x2 + w2;
        	}
            }
        
            return [x, sx + dx - x];
        }
        
        function collide_y(id, sx, sy, dy)
        {
            var block = blocks[id];
            var x = sx;
            var y = sy + dy;
            var w = block.width;
            var h = block.height;
        
            if (y + h > bound_y)
        	y = bound_y - h;
            if (y < 0)
        	y = 0;
        
            for (var id2 in blocks) {
        	if (id2 == id)
        	    continue;
        
        	var block2 = blocks[id2];
        	var x2 = block2.x;
        	var y2 = block2.y;
        	var w2 = block2.width;
        	var h2 = block2.height;
        
        	if (x + w <= x2 || x >= x2 + w2)
        	    continue;
        
        	if (dy > 0) {
        	    if (sy >= y2 + h2)
        		continue;
        	    if (y + h <= y2)
        		continue;
        	    y = y2 - h;
        	}
        	else {
        	    if (sy + h <= y2)
        		continue;
        	    if (y >= y2 + h2)
        		continue;
        	    y = y2 + h2;
        	}
            }
        
            return [y, sy + dy - y];
        }
        
        function collide(id, x, y, dx, dy)
        {
            if (Math.abs(dx) > Math.abs(dy)) {
        	[x, dx] = collide_x(id, x, y, dx);
        	[y, dy] = collide_y(id, x, y, dy);
        	[x, dx] = collide_x(id, x, y, dx);
            }
            else {
        	[y, dy] = collide_y(id, x, y, dy);
        	[x, dx] = collide_x(id, x, y, dx);
        	[y, dy] = collide_y(id, x, y, dy);
            }
        
            return [x, y];
        }
        
        function event_pos(event)
        {
            event.preventDefault();
        
            var elem = document.documentElement;
            var point = elem.createSVGPoint();
            point.x = event.clientX;
            point.y = event.clientY;
            point = point.matrixTransform(elem.getScreenCTM().inverse());
            return point;
        }
        
        function mousemove(id, event)
        {
            event.preventDefault();
        
            var block = blocks[id];
        
            var pos = event_pos(event);
            var rel_x = pos.x - start_x;
            var rel_y = pos.y - start_y;
            var block_x, block_y;
            [block_x, block_y] = collide(id, block.x, block.y, rel_x, rel_y);
        
            var elem = document.getElementById(id);
            moveto(elem, block_x, block_y);
        }
        
        function check_done()
        {
            var block = blocks.large_0;
            if (block.x == 1*SX && block.y == 3*SY)
        	set_status("Done!");
        }
        
        function mouseup(id, event)
        {
            if (event.button != 0)
        	return;
            event.preventDefault();
        
            var block = blocks[id];
        
            var pos = event_pos(event);
            var rel_x = pos.x - start_x;
            var rel_y = pos.y - start_y;
            var block_x, block_y;
            [block_x, block_y] = collide(id, block.x, block.y, rel_x, rel_y);
        
            block.x = SX * Math.round(block_x / SX);
            block.y = SY * Math.round(block_y / SY);
        
            var elem = document.getElementById(id);
            moveto(elem, block.x, block.y);
        
            window.onmousemove = undefined;
            window.onmouseup   = undefined;
        
            set_status("");
        
            check_done();
        }
        
        function mousedown(id, event)
        {
            if (solver != null)
        	return;
        
            if (event.button != 0)
        	return;
            event.preventDefault();
        
            var pos = event_pos(event);
            start_x = pos.x;
            start_y = pos.y;
        
            window.onmousemove = mousemove.bind(window, id);
            window.onmouseup   = mouseup.bind(window,   id);
        }
        
        function startup(evt)
        {
            status_t = document.getElementById("status");
        
            set_status("Ready");
        
            if (solution_id != null) {
                window.clearInterval(solution_id);
        	solution_id = null;
            }
        
            if (solver != null)
        	solver = null;
        
            blocks = {};
            for (var id in blocks_init) {
        	var block_init = blocks_init[id];
        	var block = {};
        	for (var k in block_init)
        	    block[k] = block_init[k];
        	blocks[id] = block;
            }
        
            for (var id in blocks) {
        	var block = blocks[id];
        	var elem = document.getElementById(id);
        	moveto(elem, block.x, block.y);
        	elem.onmousedown = mousedown.bind(window, id);
            }
        }
    ]]>
  </script>
  <script>
    <![CDATA[
        function Solver()
        {
            this.dirs = [[1,0], [0,1], [-1,0], [0,-1]];
        
            this.states = null;
            this.codes = null;
            this.solution = null;
            this.maxlen = null;
            this.maxdepth = null;
        }
        
        Solver.prototype = new Object();
        
        Solver.prototype.encode = function(state)
        {
            var code = 0;
            var mul = 1;
            for (var i = 0; i < state.length; i++) {
        	for (var j = 0; j < state[i].length; j++) {
        	    var x, y;
        	    [x,y] = state[i][j];
        	    var n = y*4+x;
        	    code += n * mul;
        	    mul *= 20;
        	}
            }
            return code;
        };
        
        Solver.prototype.blocked = function(state, i0, j0, x0, y0, w0, h0)
        {
            for (var i = 0; i < state.length; i++) {
        	var w = (i >> 1) + 1;
        	var h = (i & 1) + 1;
        	for (var j = 0; j < state[i].length; j++) {
        	    if (i == i0 && j == j0)
        		continue;
        	    var x = state[i][j][0];
        	    var y = state[i][j][1];
        	    if (x < x0 + w0 && x + w > x0 && y < y0 + h0 && y + h > y0)
        		return true;
        	}
            }
            return false;
        };
        
        Solver.prototype.solve1 = function(state)
        {
            var code = this.encode(state);
            if (this.codes[code])
        	return false;
            this.codes[code] = true;
        
            if (state[3][0][1] == 3 && state[3][0][0] == 1)
        	return true;
        
            var result = [];
            for (var i = 0; i < state.length; i++) {
        	var w = (i >> 1) + 1;
        	var h = (i & 1) + 1;
        	for (var j = 0; j < state[i].length; j++) {
        	    var x = state[i][j][0];
        	    var y = state[i][j][1];
        	    for (var d = 0; d < 4; d++) {
        		var dir = this.dirs[d];
        		var nx = x + dir[0];
        		var ny = y + dir[1];
        		if (nx < 0 || ny < 0 || nx + w > 4 || ny + h > 5)
        		    continue;
        		if (this.blocked(state, i, j, nx, ny, w, h))
        		    continue;
        
        		var nstate = [[],[],[],[]];
        		for (var i2 = 0; i2 < state.length; i2++)
        		    for (var j2 = 0; j2 < state[i2].length; j2++)
        			nstate[i2].push((i2 == i && j2 == j) ? [nx,ny] : state[i2][j2]);
        		nstate[0].sort();
        		nstate[1].sort();
        		result.push(nstate);
        	    }
        	}
            }
        
            return result;
        };
        
        Solver.prototype.solve = function()
        {
            this.maxdepth++;
        
            var nstates = [];
        
            for (var i = 0; i < this.states.length; i++) {
        	var state_data = this.states[i];
        	var state = state_data.state;
        	var parent = state_data.parent;
        	var result = this.solve1(state);
        	if (result == false)
        	    continue;
        	if (result == true) {
        	    this.found(state_data);
        	    return true;
        	}
        	for (var j = 0; j < result.length; j++)
        	    nstates.push({'state':result[j], 'parent':state_data});
            }
        
            if (this.maxlen < nstates.length)
        	this.maxlen = nstates.length;
        
            this.states = nstates;
        
            return false;
        };
        
        Solver.prototype.found = function(state)
        {
            this.solution = [];
            while (state != null) {
        	this.solution.push(state.state);
        	state = state.parent;
            }
        };
        
        Solver.prototype.begin = function()
        {
            var state = [[],[],[],[]];
            for (var id in blocks) {
        	var block = blocks[id];
        	var x = block.x / SX;
        	var y = block.y / SX;
        	var w = block.width / SX;
        	var h = block.height / SY;
        	var n = (w-1)*2+(h-1);
        	state[n].push([x,y]);
            }
            state[0].sort();
            state[1].sort();
        
            this.states = [{'state':state, 'parent':null}];
            this.solution = null;
            this.codes = {};
            this.maxlen = 0;
            this.maxdepth = 0;
        };
    ]]>
  </script>
  <defs
     id="defs4" />
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     gridtolerance="10000"
     guidetolerance="10"
     objecttolerance="10"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="1.4142136"
     inkscape:cx="170.59236"
     inkscape:cy="274.88809"
     inkscape:document-units="px"
     inkscape:current-layer="layer1"
     inkscape:grid-bbox="false"
     inkscape:grid-points="true"
     gridspacingx="10px"
     gridspacingy="10px"
     showgrid="true"
     inkscape:object-paths="false"
     inkscape:guide-bbox="false"
     width="400px"
     height="600px"
     inkscape:window-width="1920"
     inkscape:window-height="1368"
     inkscape:window-x="-4"
     inkscape:window-y="-4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     transform="translate(10,10)"
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1">
    <g
       id="g7159"
       style="display:none">
      <g
         inkscape:label="#g3221"
         id="vert">
        <rect
           style="fill:#ff00ff;stroke:#000000;stroke-width:5"
           id="rect2231"
           width="80"
           height="180"
           x="10"
           y="10"
           ry="20" />
        <rect
           style="opacity:1;fill:none;stroke:none"
           id="rect2247"
           width="100"
           height="200"
           x="0"
           y="0"
           ry="0" />
      </g>
      <g
         inkscape:label="#g3227"
         id="small">
        <rect
           style="fill:#ffff00;stroke:#000000;stroke-width:5"
           id="rect2235"
           width="80"
           height="80"
           x="10"
           y="10"
           ry="20" />
        <rect
           style="opacity:1;fill:none;stroke:none"
           id="rect3225"
           width="100"
           height="100"
           x="0"
           y="0"
           ry="0" />
      </g>
      <g
         inkscape:label="#horiz"
         id="horz">
        <rect
           ry="20"
           y="10"
           x="10"
           height="80"
           width="180"
           id="rect3140"
           style="opacity:1;fill:#ff0000;stroke:#000000;stroke-width:5" />
        <rect
           style="opacity:1;fill:none;stroke:none"
           id="rect3231"
           width="200"
           height="100"
           x="0"
           y="0" />
      </g>
      <g
         inkscape:label="#g3239"
         id="large">
        <rect
           style="opacity:1;fill:#ffffff;stroke:#000000;stroke-width:5"
           id="rect3138"
           width="180"
           height="180"
           x="10"
           y="10"
           ry="20" />
        <rect
           style="opacity:1;fill:none;stroke:none"
           id="rect3237"
           width="200"
           height="200"
           x="0"
           y="0" />
      </g>
    </g>
    <rect
       style="opacity:1;fill:#c8c8c8;stroke:#000000;stroke-width:5"
       id="boundary"
       width="410"
       height="510"
       x="-5"
       y="-5"
       ry="20"
       inkscape:label="#rect4224" />
    <use
       x="0"
       y="0"
       xlink:href="#vert"
       id="vert_0"
       width="100"
       height="200"
       inkscape:label="#use7133" />
    <use
       x="300"
       y="0"
       xlink:href="#vert"
       id="vert_1"
       width="100"
       height="200"
       inkscape:label="#use7135" />
    <use
       x="0"
       y="200"
       xlink:href="#vert"
       id="vert_2"
       width="100"
       height="200"
       inkscape:label="#use7137" />
    <use
       x="300"
       y="200"
       xlink:href="#vert"
       id="vert_3"
       width="100"
       height="200"
       inkscape:label="#use7139" />
    <use
       x="100"
       y="300"
       xlink:href="#small"
       id="small_0"
       width="100"
       height="100"
       inkscape:label="#use7141" />
    <use
       x="200"
       y="300"
       xlink:href="#small"
       id="small_1"
       width="100"
       height="100"
       inkscape:label="#use7143" />
    <use
       x="0"
       y="400"
       xlink:href="#small"
       id="small_2"
       width="100"
       height="100"
       inkscape:label="#use7145" />
    <use
       x="300"
       y="400"
       xlink:href="#small"
       id="small_3"
       width="100"
       height="100"
       inkscape:label="#use7147" />
    <use
       x="100"
       y="200"
       xlink:href="#horz"
       id="horz_0"
       width="200"
       height="100"
       inkscape:label="#use7155" />
    <use
       x="100"
       y="0"
       xlink:href="#large"
       id="large_0"
       width="200"
       height="200"
       inkscape:label="#use7157" />
    <g
       id="g2241">
      <rect
         y="600"
         x="-5"
         height="90"
         width="230"
         id="rect9252"
         style="fill:none;stroke:none;stroke-width:1" />
      <text
         sodipodi:linespacing="125%"
         id="status"
         y="665"
         x="0"
         style="font-size:72px;font-weight:bold;line-height:125%;font-family:sans-serif;"
         xml:space="preserve"
         inkscape:label="#text7310">Ready</text>
    </g>
    <g
       id="reset"
       onclick="startup(evt)"
       inkscape:label="#g2248">
      <rect
         y="520"
         x="240"
         height="60"
         width="160"
         ry="20"
         id="rect2246"
         style="opacity:1;fill:#00ffff;stroke:#000000;stroke-width:5" />
      <text
         xml:space="preserve"
         style="font-size:36px;font-weight:bold;font-family:sans-serif;cursor:default;"
         x="270"
         y="562.67383"
         id="text2232"
         sodipodi:linespacing="100%">Reset</text>
    </g>
    <g
       id="solve"
       onclick="solve(evt)"
       inkscape:label="#g2248">
      <rect
         y="520"
         x="-5"
         height="60"
         width="160"
         ry="20"
         id="rect2246"
         style="opacity:1;fill:#00ffff;stroke:#000000;stroke-width:5" />
      <text
         xml:space="preserve"
         style="font-size:36px;font-weight:bold;font-family:sans-serif;cursor:default;"
         x="25"
         y="562.67383"
         id="text2232"
         sodipodi:linespacing="100%">Solve</text>
    </g>
  </g>
</svg>
